// SCSS version of the LESS-based Semantic Grid System at semantic.gs

// Defaults which you can freely override
$column-width: 60;
$gutter-width: 20;
$columns: 12;
$gridsystem-width: ($column-width*$columns) + ($gutter-width*$columns);

// Set $grid-type to 1% for a fluid layout
$grid-type: 1px;

body {
	width: 90%;                 /* initial width */
	margin: 0 auto;
	font-size: 1.3em;
	background-color: white;
	max-width: 950px;           /* add max-width to the body */
}

.span-1, .span-2, .span-3 {
	min-height: 150px;
	float: left;
	margin-right: 1%;     /* 10 / 300 = .0333 */
	margin-bottom: 10px;
	display: inline-block;
	padding: 10px 5px 10px 0px;
}

.span-1 {
	width: 30.66666%;                 /* 90 / 300 = .3 */
	background-color: rgb(230, 199, 181);
	text-align: left;
	padding-left:5px;
}

.span-2 {
	width: 30.66666%;           /* 190 / 300 = .6333 */
	text-align: left;
	padding-left:5px;
	background-color: rgb(230, 199, 181);
}

.span-3 {
	width: 96.66666%;           /* 290 / 300 = .9666 */
	background-color: lightgreen;
	text-align: center;
}

@mixin row($columns:$columns) {
	display: inline-block;
	overflow: hidden;
	@if $grid-type == 1% {
	  width: (($gutter-width + $gridsystem-width) / $gridsystem-width) * 100%;
	  margin: 0 ((($gutter-width*.5) / $gridsystem-width) * -1) * 100%;
	} @else {
	  width: ($gutter-width + $gridsystem-width);
	  margin: 0 (($gutter-width*.5)*-1px);
	}
}

@mixin column($x,$columns:$columns) {
	display: inline;
	float: left;
	overflow: hidden;
	@if $grid-type == 1% {
	  width: (((($gutter-width + $column-width)*$x) - $gutter-width) / $gridsystem-width) * 100%;
	  margin: 0 (($gutter-width*.5) / $gridsystem-width) * 100%;
	} @else {
	  width: ((($gutter-width + $column-width)*$x) - $gutter-width) * 1px;
	  margin: 0 ($gutter-width*.5) * 1px;
	}
}
